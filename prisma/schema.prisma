// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nft2 {
  id           String  @id
  block        Int
  collection   String
  symbol       String
  transferable Int
  sn           String
  metadata     String?
  forsale      BigInt
  reactions    Json
  changes      Json
  owner        String
  rootowner    String
  burned       String
  equipped     String?
  priority     Json
  children     Json
  resources    Json
  properties   Json?
  pending      Boolean

  @@index([block])
  @@index([collection])
  @@map("nft2")
}

model Collection2 {
  id       String @id
  block    Int
  max      Int
  issuer   String
  symbol   String
  metadata String
  changes  Json
  count    Int

  @@index([issuer])
  @@index([symbol])
  @@map("collection2")
}

model Base2 {
  id       String  @id
  block    Int
  symbol   String
  issuer   String
  type     String?
  parts    Json?
  changes  Json
  themes   Json?
  metadata String?

  @@map("base2")
}

model History2 {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  schemaName String   @map("schema_name")
  tableName  String   @map("table_name")
  operation  String
  user       String   @default(dbgenerated("current_user"))
  newValue   Json?    @map("new_value")
  oldValue   Json?    @map("old_value")

  @@index([createdAt])
  @@map("history2")
}

model ConsolidationInfo {
  version          String                        @id
  latestBlock      Int                           @map("latest_block")
  latestRmrkOffset Int                           @map("latest_rmrk_offset")
  status           LatestConsolidatingRmrkStatus

  @@map("consolidation_info")
}

model ConsolidationLock {
  version   String   @id
  createdAt DateTime @default(now()) @map("created_at")
  user      String
  key       String   @default(uuid())

  @@map("consolidation_lock")
}

model Custodian {
  id           String @id
  block        Int
  proposalFee  String // u128
  voteFee      String // u128
  recertifyFee String // u128
  maxOptions   Int
  changes      Json

  @@index([block])
  @@map("custodian")
}

model Proposal {
  id               String         @id
  block            Int
  custodian        String
  name             String
  description      String
  collections      Json // string[]
  options          Json // string[]
  passingThreshold Float?         @map("passing_threshold")
  startDate        Float          @map("start_date")
  snapshot         Float
  endDate          Float          @map("end_date")
  nftWeight        Boolean        @map("nft_weight")
  electorate       Boolean
  owner            String
  status           ProposalStatus @default(waiting)

  @@index([block])
  @@index([custodian])
  @@index([startDate])
  @@index([snapshot])
  @@index([endDate])
  @@index([owner])
  @@index([status])
  @@map("proposal")
}

model Vote {
  id         String     @id
  block      Int
  caller     String
  proposalId String     @map("proposal_id")
  option     String
  status     VoteStatus @default(pending)
  changes    Json       @default("[]")

  @@index([block])
  @@index([caller])
  @@index([proposalId])
  @@map("vote")
}

model Result {
  id                   String  @id
  block                Int
  proposalId           String  @map("proposal_id")
  count                Json
  winningOptions       Json    @map("winning_options")
  thresholdDenominator Float   @map("threshold_denominator")
  recertify            Boolean

  @@index([block])
  @@index([proposalId])
  @@map("result")
}

// Results that were submitted by the custodian
model ResultSubmission {
  extrinsic            String   @id
  addedToDb            DateTime @default(now()) @map("added_to_db")
  proposalId           String   @map("proposal_id")
  count                Json
  winningOptions       Json     @map("winning_options")
  thresholdDenominator Float    @map("threshold_denominator")
  recertify            Boolean

  @@index([addedToDb])
  @@index([proposalId])
  @@map("result_submission")
}

enum VoteStatus {
  pending
  counted
  invalid

  @@map("vote_status")
}

// TODO: Implement history triggers
// TODO: tables tracked in the History2 table must have an id column as primary 

model BlockTime {
  block            Int   @id // TODO: Consider using datatype that can hold more numbers
  unixMilliseconds Float @map("unix_milliseconds")

  @@index([unixMilliseconds])
  @@map("block_time")
}

enum LatestConsolidatingRmrkStatus {
  processing
  complete

  @@map("latest_consolidating_rmrk_status")
}

enum ProposalStatus {
  waiting
  ready_to_count
  counted

  @@map("proposal_status")
}
